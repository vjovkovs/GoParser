name: TTS (Kokoro gRPC)

on:
  workflow_dispatch:
    inputs:
      input_path:
        description: "Path to .txt file or directory in the repo (e.g. testdata or bigtexts/story.txt)"
        required: true
        default: "testdata"
      recursive:
        description: "If input_path is a directory, recurse into subfolders"
        type: boolean
        default: false
      voice:
        description: "Kokoro voice (e.g. af_heart, bf_emma). You can also run --list-voices locally."
        required: true
        default: "af_heart"
      rate:
        description: "Sample rate (Hz)"
        required: true
        default: "24000"
      speed:
        description: "Speaking rate (1.0 = normal)"
        required: true
        default: "1.0"
      final:
        description: "Final combined file: mp3 | wav | none"
        required: true
        default: "mp3"

jobs:
  tts:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: tts-${{ github.ref }}
      cancel-in-progress: false

    env:
      GO111MODULE: "on"
      KOKORO_ADDR: "127.0.0.1:50051"
      KOKORO_REPO_ID: "hexgrad/Kokoro-82M"
      PYTHONWARNINGS: "ignore:dropout option adds dropout,ignore::FutureWarning"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            server_py/requirements.txt

      - name: Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: hf-${{ runner.os }}-${{ env.KOKORO_REPO_ID }}
          restore-keys: |
            hf-${{ runner.os }}-

      - name: Install protoc & Go plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Go & Python gRPC stubs
        run: |
          protoc -I . \
            --go_out=. --go_opt=paths=source_relative \
            --go-grpc_out=. --go-grpc_opt=paths=source_relative \
            api/tts/v1/tts.proto

          python -m pip install --upgrade pip
          python -m pip install -r server_py/requirements.txt
          python -m grpc_tools.protoc -I . \
            --python_out=server_py \
            --grpc_python_out=server_py \
            api/tts/v1/tts.proto

      # (Optional) If your requirements include 'soundfile', add this:
      # - name: libsndfile for soundfile
      #   run: sudo apt-get install -y libsndfile1

      - name: Start Kokoro gRPC server
        run: |
          nohup python server_py/kokoro_server.py \
            --listen=${KOKORO_ADDR} \
            --lang=a \
            --voice="${{ inputs.voice }}" \
            --repo="${KOKORO_REPO_ID}" \
            > server.log 2>&1 &
          echo $! > server.pid
          sleep 3

      - name: Wait for server (ListVoices)
        run: |
          go build -o bin/tts ./cmd/tts
          # Poll up to ~30s
          for i in $(seq 1 15); do
            if ./bin/tts --kokoro-addr="${KOKORO_ADDR}" --list-voices; then
              exit 0
            fi
            echo "Server not ready yet... retrying"
            sleep 2
          done
          echo "Server failed to respond to ListVoices"
          echo "==== server.log ===="
          cat server.log || true
          exit 1

      - name: Run TTS
        shell: bash
        run: |
          RECURSIVE_FLAG=""
          if [ "${{ inputs.recursive }}" = "true" ]; then RECURSIVE_FLAG="--recursive"; fi

          ./bin/tts \
            --kokoro-addr="${KOKORO_ADDR}" --kokoro-insecure \
            --in="${{ inputs.input_path }}" \
            --out="out/audio" \
            --voice="${{ inputs.voice }}" \
            --rate=${{ inputs.rate }} \
            --speed=${{ inputs.speed }} \
            --format=wav \
            --final=${{ inputs.final }} \
            ${RECURSIVE_FLAG}

      - name: Upload audio artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audio-output-${{ github.run_id }}
          path: |
            out/audio/**
            server.log

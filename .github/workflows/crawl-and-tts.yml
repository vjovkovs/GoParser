name: Crawl → TTS (Kokoro)

on:
  workflow_dispatch:
    inputs:
      start_url:
        description: "Start URL for crawler"
        required: true
        default: "http://localhost:8080/simple.html"
      max_pages:
        description: "Max pages to crawl"
        required: true
        default: "3"
      user_agent:
        description: "Optional custom User-Agent"
        required: false
        default: ""
      fmt:
        description: "Whole-book artifact: epub|pdf|txt|none"
        required: true
        default: "none"
      title:
        description: "Book title (required if fmt != none)"
        required: false
        default: ""
      author:
        description: "Author (optional for EPUB metadata)"
        required: false
        default: ""
      chapter_fmt:
        description: "Per-chapter formats (comma-separated: epub,pdf,txt) — include 'txt' for TTS"
        required: true
        default: "txt"
      out_dir:
        description: "Crawler output directory"
        required: true
        default: "out"

      # TTS inputs
      tts_voice:
        description: "Kokoro voice (e.g., af_heart, bf_emma)"
        required: true
        default: "af_heart"
      tts_rate:
        description: "Sample rate (Hz)"
        required: true
        default: "24000"
      tts_speed:
        description: "Speaking rate (1.0 = normal)"
        required: true
        default: "1.0"
      tts_final:
        description: "Final combined output: mp3 | wav | none"
        required: true
        default: "mp3"
      tts_recursive:
        description: "If true, recurse into subfolders when reading chapter .txt"
        type: boolean
        default: true

jobs:
  crawl:
    runs-on: ubuntu-latest
    outputs:
      out_dir: ${{ inputs.out_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build crawler
        run: go build -o bin/gwp ./cmd/gwp

      - name: Run crawler
        env:
          START_URL:  ${{ inputs.start_url }}
          MAX:        ${{ inputs.max_pages }}
          UA:         ${{ inputs.user_agent }}
          FMT:        ${{ inputs.fmt }}
          TITLE:      ${{ inputs.title }}
          AUTHOR:     ${{ inputs.author }}
          OUTDIR:     ${{ inputs.out_dir }}
          CHAPTERFMT: ${{ inputs.chapter_fmt }}
        run: |
          mkdir -p "$OUTDIR"
          ARGS=( "--url=$START_URL" "--max=$MAX" "--out=$OUTDIR" )
          if [ -n "$UA" ]; then ARGS+=( "--ua=$UA" ); fi
          if [ -n "$FMT" ]; then ARGS+=( "--fmt=$FMT" ); fi
          if [ -n "$TITLE" ]; then ARGS+=( "--title=$TITLE" ); fi
          if [ -n "$AUTHOR" ]; then ARGS+=( "--author=$AUTHOR" ); fi
          if [ -n "$CHAPTERFMT" ]; then ARGS+=( "--chapter-fmt=$CHAPTERFMT" ); fi
          ./bin/gwp "${ARGS[@]}"

      - name: Upload crawl artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crawl-output-${{ github.run_id }}
          path: ${{ inputs.out_dir }}/**
          if-no-files-found: error

  tts:
    needs: crawl
    runs-on: ubuntu-latest
    env:
      KOKORO_ADDR: "127.0.0.1:50051"
      KOKORO_REPO_ID: "hexgrad/Kokoro-82M"
      PYTHONWARNINGS: "ignore:dropout option adds dropout,ignore::FutureWarning"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download crawl artifact
        uses: actions/download-artifact@v4
        with:
          name: crawl-output-${{ github.run_id }}
          path: ./crawl_out

      - name: Show input files for TTS
        run: |
          echo "Expecting chapter TXT files under: ./crawl_out/${{ needs.crawl.outputs.out_dir }}/chapters"
          ls -R ./crawl_out/${{ needs.crawl.outputs.out_dir }} || true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            server_py/requirements.txt

      - name: Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: hf-${{ runner.os }}-${{ env.KOKORO_REPO_ID }}
          restore-keys: |
            hf-${{ runner.os }}-

      - name: Install protoc & Go plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Go & Python gRPC stubs
        run: |
          protoc -I . \
            --go_out=. --go_opt=paths=source_relative \
            --go-grpc_out=. --go-grpc_opt=paths=source_relative \
            api/tts/v1/tts.proto

          python -m pip install --upgrade pip
          python -m pip install -r server_py/requirements.txt
          python -m grpc_tools.protoc -I . \
            --python_out=server_py \
            --grpc_python_out=server_py \
            api/tts/v1/tts.proto

      # If your Python server requires libsndfile (only if you use soundfile), uncomment:
      # - name: libsndfile for soundfile
      #   run: sudo apt-get install -y libsndfile1

      - name: Start Kokoro gRPC server
        run: |
          nohup python server_py/kokoro_server.py \
            --listen=${KOKORO_ADDR} \
            --lang=a \
            --voice="${{ inputs.tts_voice }}" \
            --repo="${KOKORO_REPO_ID}" \
            > server.log 2>&1 &
          echo $! > server.pid
          sleep 3

      - name: Build TTS CLI
        run: go build -o bin/tts ./cmd/tts

      - name: Wait for server (ListVoices)
        run: |
          # Poll up to ~30s
          for i in $(seq 1 15); do
            if ./bin/tts --kokoro-addr="${KOKORO_ADDR}" --list-voices; then
              exit 0
            fi
            echo "Server not ready yet... retrying"
            sleep 2
          done
          echo "Server failed to respond to ListVoices"
          echo "==== server.log ===="
          cat server.log || true
          exit 1

      - name: Run TTS over crawled chapters
        shell: bash
        env:
          INPATH: ./crawl_out/${{ needs.crawl.outputs.out_dir }}/chapters
        run: |
          if [ ! -d "$INPATH" ]; then
            echo "::error::No 'chapters' directory found at $INPATH"
            echo "Make sure the crawl used chapter_fmt including 'txt' so chapter .txt files were generated."
            exit 1
          fi

          RECURSIVE_FLAG=""
          if [ "${{ inputs.tts_recursive }}" = "true" ]; then RECURSIVE_FLAG="--recursive"; fi

          ./bin/tts \
            --kokoro-addr="${KOKORO_ADDR}" --kokoro-insecure \
            --in="$INPATH" \
            --out="out/audio" \
            --voice="${{ inputs.tts_voice }}" \
            --rate=${{ inputs.tts_rate }} \
            --speed=${{ inputs.tts_speed }} \
            --format=wav \
            --final=${{ inputs.tts_final }} \
            ${RECURSIVE_FLAG}

      - name: Upload combined audio artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crawl-and-tts-output-${{ github.run_id }}
          path: |
            out/audio/**
            server.log
          if-no-files-found: warn

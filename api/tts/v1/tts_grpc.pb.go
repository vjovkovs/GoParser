// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/tts/v1/tts.proto

package ttsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TTS_Synthesize_FullMethodName = "/tts.v1.TTS/Synthesize"
	TTS_ListVoices_FullMethodName = "/tts.v1.TTS/ListVoices"
)

// TTSClient is the client API for TTS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TTSClient interface {
	Synthesize(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AudioChunk], error)
	ListVoices(ctx context.Context, in *ListVoicesRequest, opts ...grpc.CallOption) (*ListVoicesResponse, error)
}

type tTSClient struct {
	cc grpc.ClientConnInterface
}

func NewTTSClient(cc grpc.ClientConnInterface) TTSClient {
	return &tTSClient{cc}
}

func (c *tTSClient) Synthesize(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AudioChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TTS_ServiceDesc.Streams[0], TTS_Synthesize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SynthesizeRequest, AudioChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TTS_SynthesizeClient = grpc.ServerStreamingClient[AudioChunk]

func (c *tTSClient) ListVoices(ctx context.Context, in *ListVoicesRequest, opts ...grpc.CallOption) (*ListVoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVoicesResponse)
	err := c.cc.Invoke(ctx, TTS_ListVoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TTSServer is the server API for TTS service.
// All implementations must embed UnimplementedTTSServer
// for forward compatibility.
type TTSServer interface {
	Synthesize(*SynthesizeRequest, grpc.ServerStreamingServer[AudioChunk]) error
	ListVoices(context.Context, *ListVoicesRequest) (*ListVoicesResponse, error)
	mustEmbedUnimplementedTTSServer()
}

// UnimplementedTTSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTTSServer struct{}

func (UnimplementedTTSServer) Synthesize(*SynthesizeRequest, grpc.ServerStreamingServer[AudioChunk]) error {
	return status.Errorf(codes.Unimplemented, "method Synthesize not implemented")
}
func (UnimplementedTTSServer) ListVoices(context.Context, *ListVoicesRequest) (*ListVoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoices not implemented")
}
func (UnimplementedTTSServer) mustEmbedUnimplementedTTSServer() {}
func (UnimplementedTTSServer) testEmbeddedByValue()             {}

// UnsafeTTSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TTSServer will
// result in compilation errors.
type UnsafeTTSServer interface {
	mustEmbedUnimplementedTTSServer()
}

func RegisterTTSServer(s grpc.ServiceRegistrar, srv TTSServer) {
	// If the following call pancis, it indicates UnimplementedTTSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TTS_ServiceDesc, srv)
}

func _TTS_Synthesize_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SynthesizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TTSServer).Synthesize(m, &grpc.GenericServerStream[SynthesizeRequest, AudioChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TTS_SynthesizeServer = grpc.ServerStreamingServer[AudioChunk]

func _TTS_ListVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTSServer).ListVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TTS_ListVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTSServer).ListVoices(ctx, req.(*ListVoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TTS_ServiceDesc is the grpc.ServiceDesc for TTS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TTS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tts.v1.TTS",
	HandlerType: (*TTSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVoices",
			Handler:    _TTS_ListVoices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Synthesize",
			Handler:       _TTS_Synthesize_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/tts/v1/tts.proto",
}
